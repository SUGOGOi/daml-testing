module Task where

import Daml.Script

-- Template for a Task (like a to-do item)
template Task
  with
    owner : Party           -- Who owns this task
    description : Text      -- What the task is about
    completed : Bool        -- Is it done?
  where
    signatory owner         -- Owner must approve creation/deletion
    observer owner          -- Owner can see this task

    -- Choice to UPDATE the task
    -- This is a consuming choice by default (archives the old contract)
    choice UpdateTask : ContractId Task
      with
        newDescription : Text
        newCompleted : Bool
      controller owner      -- Only owner can update
      do
        -- Don't use 'archive self' here!
        -- The choice is consuming by default, so it auto-archives
        create this with    -- Create new task with updated fields
          description = newDescription
          completed = newCompleted

    -- Choice to DELETE the task
    choice DeleteTask : ()
      controller owner      -- Only owner can delete
      do
        -- archive self is not needed here either
        -- The choice consumes the contract automatically
        return ()

-- Test script to try out the Task template
testTask : Script ()
testTask = do
  -- Create a test user
  alice <- allocateParty "Alice"
  
  -- Alice creates a task
  taskId <- submit alice do
    createCmd Task with
      owner = alice
      description = "Learn DAML"
      completed = False
  
  -- Alice updates the task (this consumes taskId and returns a new ID)
  updatedTaskId <- submit alice do
    exerciseCmd taskId UpdateTask with
      newDescription = "Learn DAML CRUD"
      newCompleted = True
  
  -- Alice deletes the updated task (use updatedTaskId, not taskId)
  submit alice do
    exerciseCmd updatedTaskId DeleteTask
  
  return ()
